#!/usr/bin/env node

const path = require("path");
const fs = require("fs");
const { Dex } = require("@pkmn/dex");
const { Generations } = require("@pkmn/data");

type Pokemon = {
  generation: number;
  dexNumber: number;
  idName: string;
  displayName: string | string[];
  rating: number | number[];
  specialConditions?: string | string[];
};

const GENERATION = 8;

const getFileDir = (pokemonIdName: string) => {
  return path.join(POST_LOCATION_PREFIX, `${pokemonIdName}.mdx`);
};

const POST_LOCATION_PREFIX = path.join(
  __dirname,
  "../src/pokemon/",
  GENERATION.toString()
);

const natdexFilter = (d: any) => {
  if (!d.exists) {
    return false;
  }
  if (
    "isNonstandard" in d &&
    ![null, "Past", "Future", "LGPE", "Gigantamax"].includes(d.isNonstandard)
  ) {
    return false;
  }
  if (d.kind === "Ability" && d.id === "noability") {
    return false;
  }
  return !("tier" in d && d.tier === "Unreleased");
};

const getFileContent = (pokemon: Pokemon) => {
  const fileContent = `---
title: "${pokemon.displayName}"
generation: ${GENERATION}
dexNumber: ${pokemon.dexNumber}
idName: "${pokemon.idName}"
displayName: "${pokemon.displayName}"
rating: -2
---
  
Page was autogenerated. Check back later for content.

`;
  return fileContent;
};

const gens = new Generations(Dex, natdexFilter);
const ALL_POKEMON: any[] = Array.from(gens.get(GENERATION).species);

if (!fs.existsSync(POST_LOCATION_PREFIX)) {
  fs.mkdirSync(POST_LOCATION_PREFIX, { recursive: true });
}

for (const specie of ALL_POKEMON) {
  const pokemon: Pokemon = {
    generation: GENERATION,
    dexNumber: specie.num!,
    idName: specie.id!,
    displayName: specie.name!,
    rating: -2,
  };
  const fileDir = getFileDir(pokemon.idName);
  fs.writeFileSync(fileDir, getFileContent(pokemon), { flag: "a" });
  console.log("generate.tsx: created file " + fileDir);
}
