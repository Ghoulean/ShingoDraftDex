{"version":3,"file":"component---src-templates-tier-list-tsx-3fe792418cb99e0ce5ce.js","mappings":"2gCAYA,IAAMA,GAAWC,EAAAA,EAAAA,GAAAA,MAAAA,CAAAC,OAAAA,WAAAD,CAAA,CAAAE,KAAAA,SAAAC,OAAAA,iGAQF,SAASC,EAAmBC,GAoBvC,IAfA,IAe8B,EAdxBC,EADQD,EAAME,KAAKC,OAAQC,MACCC,KAAI,SAACC,GACnC,OAAOA,EAAKC,KAAKC,WACrB,IAEMC,GAD4BR,EAAS,GAAGS,WACI,CAC9CC,QAAS,EACTC,QAAS,KAEPC,EAA2C,CAC7CF,QAAS,EACTC,QAAS,IAEPE,EAA6C,GAAG,iBAE3CF,EAAO,QACRG,GAAyBH,EAAQD,OACvC,IAAuB,IAAnBI,EACAN,EAAqBG,QAAQI,KAAKJ,QAC/B,IAAuB,IAAnBG,EACPF,EAAoBD,QAAQI,KAAKJ,OAC9B,CACH,IAAIK,EAASH,EAAoBI,MAC7B,SAACC,GAAC,OAAKA,EAAER,SAAWS,KAAKC,MAAMN,EAAc,SAElCO,IAAXL,GACAA,EAAS,CACLN,OAAQI,EACRH,QAAS,CAACA,IAEdE,EAAoBE,KAAKC,IAEzBA,EAAOL,QAAQI,KAAKJ,EAE5B,CAAC,EAnBL,IAAsBX,KAAQ,aAAEsB,IAqBhCT,EAAoBU,MAAK,SAACC,EAAGN,GACzB,OAAOM,EAAEd,OAASQ,EAAER,MACxB,IAIA,IAHA,IAAMe,EAAoBZ,EAAoBA,EAAoBa,OAAS,GAAGhB,OAExEiB,EAAQ,GAAG,WACRC,GAAC,MACAC,GAC6C,QAA/C,EAAAhB,EAAoBI,MAAK,SAACC,GAAC,OAAKA,EAAER,SAAWkB,CAAC,WAAC,aAA/CE,EAAiDnB,UAAW,GAChEgB,EAAMZ,MACFgB,EAAAA,EAAAA,IAAAA,MAAAA,KACKF,EAAczB,KAAI,SAACO,GAChB,OACIoB,EAAAA,EAAAA,IAACC,EAAAA,EAAI,CACDC,IAAKtB,EAAQF,WACbyB,mBAAoBvB,EAAQwB,YAC5BC,MAAM,GAGlB,KAEN,EAfGR,EAAI,EAAGA,GAAKH,EAAWG,GAAK,EAAGS,EAA/BT,GAiBT,IAAMU,EAAc9B,EAAqBG,QAAQP,KAAI,SAACO,GAClD,OACIoB,EAAAA,EAAAA,IAACC,EAAAA,EAAI,CACDC,IAAKtB,EAAQF,WACbyB,mBAAoBvB,EAAQwB,YAC5BC,MAAM,GAGlB,IACMG,EAAa3B,EAAoBD,QAAQP,KAAI,SAACO,GAChD,OACIoB,EAAAA,EAAAA,IAACC,EAAAA,EAAI,CACDC,IAAKtB,EAAQF,WACbyB,mBAAoBvB,EAAQwB,YAC5BC,MAAM,GAGlB,IAEA,OACIL,EAAAA,EAAAA,IAACtC,EAAQ,KACJkC,EAAMvB,KAAI,SAACoC,EAAMZ,GACd,OACIG,EAAAA,EAAAA,IAAAA,MAAAA,MACIA,EAAAA,EAAAA,IAAAA,IAAAA,KAAAA,WAAYH,IACZG,EAAAA,EAAAA,IAAAA,MAAAA,KAAMS,IACNT,EAAAA,EAAAA,IAAAA,KAAAA,MAGZ,KACAA,EAAAA,EAAAA,IAAAA,MAAAA,MACIA,EAAAA,EAAAA,IAAAA,IAAAA,KAAAA,oBACAA,EAAAA,EAAAA,IAAAA,MAAAA,KAAMO,IACNP,EAAAA,EAAAA,IAAAA,KAAAA,QAEJA,EAAAA,EAAAA,IAAAA,MAAAA,MACIA,EAAAA,EAAAA,IAAAA,IAAAA,KAAAA,mBACAA,EAAAA,EAAAA,IAAAA,MAAAA,KAAMQ,IACNR,EAAAA,EAAAA,IAAAA,KAAAA,OAIhB,C","sources":["webpack://shingo-draft-dex/./src/templates/tier_list.tsx"],"sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport type { Pokemon } from \"../models/Pokemon\";\nimport { graphql } from \"gatsby\";\nimport { GenerationNum, Specie } from \"@pkmn/data\";\nimport { Icon } from \"../widgets/icon\";\n\ntype PokemonRatingBucket = {\n    rating: number;\n    pokemon: Pokemon[];\n};\n\nconst Centered = styled.nav({\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"flex-start\",\n    margin: \"0 auto\",\n    padding: \"10px 0 0\",\n});\n\nexport default function GenerationTierList(props: {\n    data: {\n        allMdx: { edges: { node: { frontmatter: Pokemon; body: string } }[] };\n    };\n}) {\n    const edges = props.data.allMdx!.edges;\n    const pokemons: Pokemon[] = edges.map((edge) => {\n        return edge.node.frontmatter;\n    });\n    const generation: GenerationNum = pokemons[0].generation;\n    const unratedPokemonBucket: PokemonRatingBucket = {\n        rating: -2,\n        pokemon: [],\n    };\n    const bannedPokemonBucket: PokemonRatingBucket = {\n        rating: -1,\n        pokemon: [],\n    };\n    const ratedPokemonBuckets: PokemonRatingBucket[] = [];\n\n    for (const pokemon of pokemons) {\n        const pokemonRating: number = +pokemon.rating;\n        if (pokemonRating === -2) {\n            unratedPokemonBucket.pokemon.push(pokemon);\n        } else if (pokemonRating === -1) {\n            bannedPokemonBucket.pokemon.push(pokemon);\n        } else {\n            let bucket = ratedPokemonBuckets.find(\n                (b) => b.rating === Math.floor(pokemonRating)\n            );\n            if (bucket === undefined) {\n                bucket = {\n                    rating: pokemonRating,\n                    pokemon: [pokemon],\n                };\n                ratedPokemonBuckets.push(bucket);\n            } else {\n                bucket.pokemon.push(pokemon);\n            }\n        }\n    }\n    ratedPokemonBuckets.sort((a, b) => {\n        return a.rating - b.rating;\n    });\n    const maxRating: number = ratedPokemonBuckets[ratedPokemonBuckets.length - 1].rating;\n\n    const tiers = [];\n    for (let i = 0; i <= maxRating; i += 1) {\n        const pokemonInTier: Pokemon[] =\n            ratedPokemonBuckets.find((b) => b.rating === i)?.pokemon || [];\n        tiers.push(\n            <div>\n                {pokemonInTier.map((pokemon: Pokemon) => {\n                    return (\n                        <Icon\n                            gen={pokemon.generation}\n                            pokemonDisplayName={pokemon.displayName}\n                            link={true}\n                        />\n                    );\n                })}\n            </div>\n        );\n    }\n    const unratedTier = unratedPokemonBucket.pokemon.map((pokemon: Pokemon) => {\n        return (\n            <Icon\n                gen={pokemon.generation}\n                pokemonDisplayName={pokemon.displayName}\n                link={true}\n            />\n        );\n    });\n    const bannedTier = bannedPokemonBucket.pokemon.map((pokemon: Pokemon) => {\n        return (\n            <Icon\n                gen={pokemon.generation}\n                pokemonDisplayName={pokemon.displayName}\n                link={true}\n            />\n        );\n    });\n\n    return (\n        <Centered>\n            {tiers.map((tier, i) => {\n                return (\n                    <div>\n                        <p>Rating: {i}</p>\n                        <div>{tier}</div>\n                        <br />\n                    </div>\n                );\n            })}\n            <div>\n                <p>Rating: unrated</p>\n                <div>{unratedTier}</div>\n                <br />\n            </div>\n            <div>\n                <p>Rating: banned</p>\n                <div>{bannedTier}</div>\n                <br />\n            </div>\n        </Centered>\n    );\n}\n\nexport const query = graphql`\n    query ($generation: Int!) {\n        allMdx(filter: { frontmatter: { generation: { eq: $generation } } }) {\n            edges {\n                node {\n                    frontmatter {\n                        dexNumber\n                        displayName\n                        generation\n                        idName\n                        rating\n                        specialConditions\n                        tags\n                    }\n                }\n            }\n        }\n    }\n`;\n"],"names":["Centered","_styled","target","name","styles","GenerationTierList","props","pokemons","data","allMdx","edges","map","edge","node","frontmatter","unratedPokemonBucket","generation","rating","pokemon","bannedPokemonBucket","ratedPokemonBuckets","pokemonRating","push","bucket","find","b","Math","floor","undefined","_loop2","sort","a","maxRating","length","tiers","i","pokemonInTier","_ratedPokemonBuckets$","___EmotionJSX","Icon","gen","pokemonDisplayName","displayName","link","_loop","unratedTier","bannedTier","tier"],"sourceRoot":""}